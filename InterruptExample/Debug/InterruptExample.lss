
InterruptExample.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000001c2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000675  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000591  00000000  00000000  000008d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002c3  00000000  00000000  00000e66  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000007c  00000000  00000000  0000112c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000033d  00000000  00000000  000011a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000013c  00000000  00000000  000014e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001621  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_1>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 96 00 	call	0x12c	; 0x12c <main>
  74:	0c 94 a5 00 	jmp	0x14a	; 0x14a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_1>:
*/

volatile char c;

ISR(INT0_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	2f 93       	push	r18
  88:	8f 93       	push	r24
  8a:	9f 93       	push	r25
	c++;
  8c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  90:	8f 5f       	subi	r24, 0xFF	; 255
  92:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	if(c>15) c=0;
  96:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  9a:	80 31       	cpi	r24, 0x10	; 16
  9c:	10 f0       	brcs	.+4      	; 0xa2 <__vector_1+0x26>
  9e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
	c = c & 0x0f;
  a2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  a6:	8f 70       	andi	r24, 0x0F	; 15
  a8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	PORTA = c;
  ac:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  b0:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	2f e9       	ldi	r18, 0x9F	; 159
  b4:	86 e8       	ldi	r24, 0x86	; 134
  b6:	91 e0       	ldi	r25, 0x01	; 1
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <__vector_1+0x3c>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <__vector_1+0x46>
  c2:	00 00       	nop
	_delay_ms(500);
	GIFR = 0xFF;
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	8a bf       	out	0x3a, r24	; 58
}
  c8:	9f 91       	pop	r25
  ca:	8f 91       	pop	r24
  cc:	2f 91       	pop	r18
  ce:	0f 90       	pop	r0
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	0f 90       	pop	r0
  d4:	1f 90       	pop	r1
  d6:	18 95       	reti

000000d8 <__vector_2>:

ISR(INT1_vect)
{
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	2f 93       	push	r18
  e4:	8f 93       	push	r24
  e6:	9f 93       	push	r25
	c--;
  e8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  ec:	81 50       	subi	r24, 0x01	; 1
  ee:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	if(c<0) c=15;
  f2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
	c = c & 0x0f;
  f6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  fa:	8f 70       	andi	r24, 0x0F	; 15
  fc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	PORTA = c;
 100:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 104:	8b bb       	out	0x1b, r24	; 27
 106:	2f e9       	ldi	r18, 0x9F	; 159
 108:	86 e8       	ldi	r24, 0x86	; 134
 10a:	91 e0       	ldi	r25, 0x01	; 1
 10c:	21 50       	subi	r18, 0x01	; 1
 10e:	80 40       	sbci	r24, 0x00	; 0
 110:	90 40       	sbci	r25, 0x00	; 0
 112:	e1 f7       	brne	.-8      	; 0x10c <__vector_2+0x34>
 114:	00 c0       	rjmp	.+0      	; 0x116 <__vector_2+0x3e>
 116:	00 00       	nop
	_delay_ms(500);
	GIFR = 0xFF;
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	8a bf       	out	0x3a, r24	; 58
}
 11c:	9f 91       	pop	r25
 11e:	8f 91       	pop	r24
 120:	2f 91       	pop	r18
 122:	0f 90       	pop	r0
 124:	0f be       	out	0x3f, r0	; 63
 126:	0f 90       	pop	r0
 128:	1f 90       	pop	r1
 12a:	18 95       	reti

0000012c <main>:

int main(void)
{
	c = 0x0f;
 12c:	8f e0       	ldi	r24, 0x0F	; 15
 12e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	DDRA = 0xff;
 132:	8f ef       	ldi	r24, 0xFF	; 255
 134:	8a bb       	out	0x1a, r24	; 26
	PORTA = c;
 136:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 13a:	8b bb       	out	0x1b, r24	; 27
	GICR = (1 << INT0) | (1 << INT1);
 13c:	80 ec       	ldi	r24, 0xC0	; 192
 13e:	8b bf       	out	0x3b, r24	; 59
	MCUCR = MCUCR | 0x0a;
 140:	85 b7       	in	r24, 0x35	; 53
 142:	8a 60       	ori	r24, 0x0A	; 10
 144:	85 bf       	out	0x35, r24	; 53
	sei();
 146:	78 94       	sei
 148:	ff cf       	rjmp	.-2      	; 0x148 <main+0x1c>

0000014a <_exit>:
 14a:	f8 94       	cli

0000014c <__stop_program>:
 14c:	ff cf       	rjmp	.-2      	; 0x14c <__stop_program>
