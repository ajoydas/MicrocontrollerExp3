
InterruptExample.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000010c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000013c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005f1  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000568  00000000  00000000  00000789  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000261  00000000  00000000  00000cf1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000f54  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000327  00000000  00000000  00000f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  0000129f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
//
//}

int main(void)
{
	DDRA = 0xff;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x00;
  70:	1b ba       	out	0x1b, r1	; 27
	DDRB = 0xfc;
  72:	8c ef       	ldi	r24, 0xFC	; 252
  74:	87 bb       	out	0x17, r24	; 23
			else PORTA += 1;
		}
		if(PINB & (1<<PB1))
		{
			if(PORTA == 0x00){
				PORTA = 0x0f;
  76:	9f e0       	ldi	r25, 0x0F	; 15
			//PORTC = 0x01;
		//}
		//else PORTC = 0x00;
		//_delay_ms(2000);

		if(PINB & (1<<PB0))
  78:	b0 9b       	sbis	0x16, 0	; 22
  7a:	08 c0       	rjmp	.+16     	; 0x8c <main+0x20>
		{
			if(PORTA == 0x0f){
  7c:	8b b3       	in	r24, 0x1b	; 27
  7e:	8f 30       	cpi	r24, 0x0F	; 15
  80:	11 f4       	brne	.+4      	; 0x86 <main+0x1a>
				PORTA = 0x00;
  82:	1b ba       	out	0x1b, r1	; 27
  84:	03 c0       	rjmp	.+6      	; 0x8c <main+0x20>
			}
			else PORTA += 1;
  86:	8b b3       	in	r24, 0x1b	; 27
  88:	8f 5f       	subi	r24, 0xFF	; 255
  8a:	8b bb       	out	0x1b, r24	; 27
		}
		if(PINB & (1<<PB1))
  8c:	b1 9b       	sbis	0x16, 1	; 22
  8e:	08 c0       	rjmp	.+16     	; 0xa0 <main+0x34>
		{
			if(PORTA == 0x00){
  90:	8b b3       	in	r24, 0x1b	; 27
  92:	81 11       	cpse	r24, r1
  94:	02 c0       	rjmp	.+4      	; 0x9a <main+0x2e>
				PORTA = 0x0f;
  96:	9b bb       	out	0x1b, r25	; 27
  98:	03 c0       	rjmp	.+6      	; 0xa0 <main+0x34>
			}
			else PORTA -= 1;
  9a:	8b b3       	in	r24, 0x1b	; 27
  9c:	81 50       	subi	r24, 0x01	; 1
  9e:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	2f e7       	ldi	r18, 0x7F	; 127
  a2:	3a e1       	ldi	r19, 0x1A	; 26
  a4:	86 e0       	ldi	r24, 0x06	; 6
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	30 40       	sbci	r19, 0x00	; 0
  aa:	80 40       	sbci	r24, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0x3a>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x44>
  b0:	00 00       	nop
  b2:	e2 cf       	rjmp	.-60     	; 0x78 <main+0xc>

000000b4 <_exit>:
  b4:	f8 94       	cli

000000b6 <__stop_program>:
  b6:	ff cf       	rjmp	.-2      	; 0xb6 <__stop_program>
